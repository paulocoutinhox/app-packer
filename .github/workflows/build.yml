name: Build and Package for All Platforms

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact: myapp-linux.deb
          - os: windows-latest
            artifact: myapp-windows-installer.exe
          - os: macos-latest
            artifact: myapp-macos.dmg

    steps:
    - uses: actions/checkout@v4

    # 1. Install build and icon dependencies
    - name: Install dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-pip cmake ninja-build g++ imagemagick
        sudo pip3 install cairosvg

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install python3 cmake ninja imagemagick
        pip3 install cairosvg

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install cmake nsis python3 imagemagick
        pip3 install cairosvg

    # 2. Configure and build using CMake (with optional icon generation)
    - name: Configure CMake (generate icons)
      run: cmake -B build -DGENERATE_ICONS=ON -G Ninja

    - name: Build (including icons)
      run: cmake --build build --config Release

    # 3. Packaging per platform
    # WINDOWS: NSIS installer
    - name: Prepare NSIS installer files
      if: runner.os == 'Windows'
      run: |
        mkdir build/assets
        xcopy assets build\assets\ /E /I /Y
        copy README.md build\README.md
        copy LICENSE build\LICENSE
        # The icon is generated by CMake

    - name: Build NSIS installer
      if: runner.os == 'Windows'
      run: makensis installer.nsi

    - name: Upload Windows installer
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v4
      with:
        name: windows-installer
        path: build/myapp-windows-installer.exe

    # MACOS: .app and DMG
    - name: Create .app bundle and DMG
      if: runner.os == 'macOS'
      run: |
        mkdir -p build/MyApp.app/Contents/MacOS
        cp build/myapp build/MyApp.app/Contents/MacOS/
        mkdir -p build/MyApp.app/Contents/Resources/assets
        cp -R assets/* build/MyApp.app/Contents/Resources/assets/
        cp README.md build/MyApp.app/Contents/Resources/
        cp LICENSE build/MyApp.app/Contents/Resources/
        cp icons/myapp.icns build/MyApp.app/Contents/Resources/icon.icns
        cat > build/MyApp.app/Contents/Info.plist <<EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
          <key>CFBundleName</key><string>MyApp</string>
          <key>CFBundleDisplayName</key><string>MyApp</string>
          <key>CFBundleIdentifier</key><string>com.yourcompany.myapp</string>
          <key>CFBundleVersion</key><string>1.0.0</string>
          <key>CFBundleExecutable</key><string>myapp</string>
          <key>CFBundleIconFile</key><string>icon.icns</string>
        </dict>
        </plist>
        EOF
        brew install create-dmg
        create-dmg \
          --volname "MyApp" \
          --window-size 800 400 \
          --icon-size 120 \
          --app-drop-link 600 200 \
          build/MyApp.app

    - name: Upload macOS DMG
      if: runner.os == 'macOS'
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: MyApp*.dmg

    # LINUX: .deb with icon and .desktop
    - name: Prepare DEB package
      if: runner.os == 'Linux'
      run: |
        mkdir -p myapp_deb/DEBIAN
        mkdir -p myapp_deb/usr/bin
        mkdir -p myapp_deb/usr/share/myapp/assets
        mkdir -p myapp_deb/usr/share/icons/hicolor/128x128/apps
        mkdir -p myapp_deb/usr/share/applications
        cp build/myapp myapp_deb/usr/bin/
        cp -R assets/* myapp_deb/usr/share/myapp/assets/
        cp README.md myapp_deb/usr/share/myapp/
        cp LICENSE myapp_deb/usr/share/myapp/
        cp icons/icon_128x128.png myapp_deb/usr/share/icons/hicolor/128x128/apps/myapp.png
        cp myapp.desktop myapp_deb/usr/share/applications/
        cat <<EOF > myapp_deb/DEBIAN/control
        Package: myapp
        Version: 1.0.0
        Section: base
        Priority: optional
        Architecture: amd64
        Maintainer: Your Name <youremail@domain.com>
        Description: MyApp - Professional C++ Application
        EOF

    - name: Build DEB
      if: runner.os == 'Linux'
      run: dpkg-deb --build myapp_deb ${{ matrix.artifact }}

    - name: Upload DEB package
      if: runner.os == 'Linux'
      uses: actions/upload-artifact@v4
      with:
        name: linux-deb
        path: myapp-linux.deb

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./release

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          release/**/*.exe
          release/**/*.dmg
          release/**/*.deb
